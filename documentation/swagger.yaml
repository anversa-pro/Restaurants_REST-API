swagger: "2.0"
info:
  description: "HTTP server REST API implementation. Creating a registration service that receives an email and a password. Allowing login into the server with an email and a password. Allowing logged in users to do CRUD operations into the table."
  version: "1.0.0"
  title: "RESTAURANT RESTFUL API"
  contact:
    email: "anversa.pro@gmail.com"
  termsOfService: "http://swagger.io/terms/"

host: "54.174.10.3:8000"
basePath: "/"
tags:
- name: "restaurant"
  description: "2021 list of the best restaurants in LATAM"
  externalDocs:
    description: "Find out more"
    url: "https://www.theworlds50best.com/latinamerica/en/"
- name: "city"
  description: "Restaurant listed cities"
- name: "country"
  description: "Restaurant listed countries"
- name: "user"
  description: "User operations"
- name: "authorization"
  description: "Authorization, login process"
- name: "random"
  description: "Random number request"
schemes:
- "http"
parameters:
  authParam:
    in: "header"
    name: "jwtAuth"
    type: "string"
    required: true 
  restaurantParam:
    in: "path"
    name: "restaurant_id"
    type: "integer"
    required: true
    description: "The restaurant id to return."
  cityParam:
    in: "path"
    name: "city_id"
    type: "integer"
    required: true
    description: "The city id to return."
  countryParam:
    in: "path"
    name: "country_id"
    type: "integer"
    required: true
    description: "The country id to return."
  objectParam:
    in: "body"
    name: "body"
    description: "Restaurant object that needs to be changed"
    required: true
    schema:
      $ref: "#/definitions/Restaurant"
  pageParam:
    in: "query"
    name: "page"
    type: "integer"
    required: false
    minimum: 1
    default: 1
    description: "The page number to return."
  limitParam:
    in: "query"  
    name: "limit"
    type: "integer"
    required: false
    minimum: 1
    default: 5
    description: "The number of elements to return"
  privateParam:
    in: "query"  
    name: "private"
    type: "string"
    required: false
    default: false
    description: "To return user only private records"
  publicParam:
    in: "query"  
    name: "public"
    type: "string"
    required: false
    default: false
    description: "To return user only public records."
paths:
  /restaurants/create:
    post:
      tags:
      - "restaurant"
      summary: "Add a new restaurant to the database"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/objectParam"
      security:
      - jwtAuth: []
      responses:
        "200":
          description: "Successful operation"
        "400":
          description: "Missing parameters"
        "500":
          description: "Server error"
  /restaurants:
    get:
      tags:
      - "restaurant"
      summary: "Return all public restaurants in the database"
      description: ""
      produces:
      - "application/json"
      parameters:
        - $ref: "#/parameters/pageParam"
        - $ref: "#/parameters/limitParam"
      security:
      - jwtAuth: []
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "Missing parameters"
        "404":
          description: "Information not found"
        "500":
          description: "Server error"
  /restaurants/user:
    get:
      tags:
      - "restaurant"
      summary: "Return login user records in the database"
      description: ""
      produces:
      - "application/json"
      parameters:
        - $ref: "#/parameters/pageParam"
        - $ref: "#/parameters/limitParam"
        - $ref: "#/parameters/privateParam"      
        - $ref: "#/parameters/publicParam"
      security:
      - jwtAuth: []
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "Missing parameters"
        "404":
          description: "Information not found"
        "500":
          description: "Server error"
  /restaurants/{restaurant_id}:
    get:
      tags:
      - "restaurant"
      summary: "Return an specific restaurant"
      description: ""
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/restaurantParam"
      - $ref: "#/parameters/pageParam"
      - $ref: "#/parameters/limitParam"
      security:
      - jwtAuth: []
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        "403":
          description: "The user does not have the necessary permissions"
        "404":
          description: "Information not found"
        "500":
          description: "Server error"
  /restaurants/{restaurant_id}/update:
    put:
      tags:
      - "restaurant"
      summary: "Modify an existant restaurant of the list"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/objectParam"
      - $ref: "#/parameters/restaurantParam"
      security:
      - jwtAuth: []
      responses:
        "200":
          description: "Successful operation"
        "400":
          description: "Missing parameters"
        "500":
          description: "Server error"

  /restaurants/{restaurant_id}/delete:
    delete:
      tags:
      - "restaurant"
      summary: "Delete a restaurant of the list"
      description: ""
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/restaurantParam"
      security:
      - jwtAuth: []
      responses:
        '200':
          description: "Successful operation"
        "400":
          description: "Missing parameters"
        "500":
          description: "Server error"
  /cities:
    get:
      tags:
      - "city"
      summary: "Return all cities in the database"
      description: ""
      produces:
      - "application/json"
      parameters:
        - $ref: "#/parameters/pageParam"
        - $ref: "#/parameters/limitParam"
      security:
      - jwtAuth: []
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "Missing parameters"
        "404":
          description: "Information not found"
        "500":
          description: "Server error"
  /cities/{city_id}:
    get:
      tags:
      - "city"
      summary: "Return a city in the database"
      description: ""
      produces:
      - "application/json"
      parameters:
        - $ref: "#/parameters/cityParam"
      security:
      - jwtAuth: []
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "Missing parameters"
        "404":
          description: "Information not found"
        "500":
          description: "Server error"
  /countries:
    get:
      tags:
      - "country"
      summary: "Return all countries in the database"
      description: ""
      produces:
      - "application/json"
      parameters:
        - $ref: "#/parameters/pageParam"
        - $ref: "#/parameters/limitParam"
      security:
      - jwtAuth: []
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "Missing parameters"
        "404":
          description: "Information not found"
        "500":
          description: "Server error"
  /countries/{country_id}:
    get:
      tags:
      - "country"
      summary: "Return a country in the database"
      description: ""
      produces:
      - "application/json"
      parameters:
        - $ref: "#/parameters/countryParam"
      security:
      - jwtAuth: []
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "Missing parameters"
        "404":
          description: "Information not found"
        "500":
          description: "Server error"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid parameters supplied"
        "500":
          description: "Server error"
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
        "500":
          description: "Server error"
  /auth:
    post:
      tags:
      - "authorization"
      summary: "User login, returns an access_token valid for 20 minutes"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The user parameters for log in"
        required: true
        schema:
          $ref: "#/definitions/Login"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        400":
          description: "Invalid username/password supplied"
  /random:
    get:
      tags:
      - "random"
      summary: "Return a random number"
      description: ""
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "Invalid username/password supplied"

securityDefinitions:
  jwtAuth:
    type: oauth2
    authorizationUrl: http://swagger.io/api/oauth/dialog
    flow: implicit
    scopes:
      write:restaurants: modify restaurants in your account
      read:restaurants: read public restaurants and in your account

definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        readOnly: true
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
        format: "password"
  Login:
    type: "object"
    required:
    - "email"
    - "password"
    properties:
      email:
        type: "string"
      password:
        type: "string"
        format: "password"
  City:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        readOnly: true
      name:
        type: "string"
      country:
        type: "integer"
        format: "int32"
      country_key:
        type: "array"
        description: "foreignkey to country model"
        items:
          $ref: "#/definitions/Country"
  Country:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        readOnly: true
      name:
        type: "string"
  Restaurant:
    type: "object"
    required:
    - "name"
    - "ranking"
    - "chef"
    - "abstract"
    - "public_access"
    - "city"
    properties:
      id:
        type: "integer"
        format: "int32"
        readOnly: true
      name:
        type: "string"
      ranking:
        type: "integer"
        format: "int32"
      chef:
        type: "string"
      abstract:
        type: "string"
      public_access:
        type: "boolean"
      city:
        type: "integer"
        format: "int32"
      city_key:
        type: "array"
        description: "foreing key to city model"
        items:
          $ref: "#/definitions/City"
      user_id:
        type: "integer"
        format: "int32"
      user_key:
        type: "object"
        description: "foreing key to user model"
        items:
          $ref: "#/definitions/User"
  ApiResponse:
    type: "object"
    properties:
      key:
        type: "string"
      value:
        additionalProperties:
          type: object
          properties:
            info:
              type: string
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"